<!DOCTYPE html>
<html>

  <head>
    <title>Atlas Reality</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Lato:300,400" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://www.atlasreality.xyz/loading-bar.css"/>
    <script type="text/javascript" src="https://www.atlasreality.xyz/loading-bar.js"></script>
    <link rel="stylesheet" type="text/css" href="https://www.atlasreality.xyz/style.css" />

    <!-- defines the firebase library -->
    <script src="https://www.gstatic.com/firebasejs/3.7.4/firebase.js"></script>
    <script>
        var config = {
            apiKey: "AIzaSyBI9kkVq2jZNpTKjaX79BqgcepavI9wzQs",
            authDomain: "mosaic-portal.firebaseapp.com",
            projectId: "mosaic-portal",
            storageBucket: "mosaic-portal.appspot.com",
            databaseURL: "https://mosaic-portal.firebaseio.com"
        };
        firebase.initializeApp(config);
    </script>
  </head>
  <body>

    <div class="dashnavbar">
      <ul class="ulnavbar">
        <li><a href="https://www.atlasreality.xyz" class="generalnav">Atlas</a></li>
        <li><a class="generalnav">SDK</a></li>
        <li><a class="dashnavelement">{{username}}</a></li>
        <li><a href="https://www.atlasreality.xyz/auth/logout" class="dashnavelement">Logout</a></li>

        <li class="addbuttonnav" title="Add Scene">
          <label for="file-upload" class="custom-file-upload">
              <img src="https://www.atlasreality.xyz/addButton4.svg" alt="Add new scene" height="32" width="32">
              <input id="file-upload" type="file" name="scene" value="Please upload your scene">
              <script>
                // https://eloquentjavascript.net/18_forms.html
                var fileUploadButton = document.querySelector('input');
                fileUploadButton.addEventListener("change", function() {

                  var userID = "{{uid}}";

                  var storage = firebase.storage();
                  var database = firebase.database();

                  console.log('1. init');

                  if (fileUploadButton.files.length > 0) {
                    var file = fileUploadButton.files[0];
                    var storageRef = storage.ref().child(`users/${userID}/${file.name}`);
                    var databaseRef = database.ref(`users/${userID}/scenes/`);
                    var statusBar = new ldBar("#progressBar");

                    var uploadTask = storageRef.put(file);
                    uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function(snapshot) {

                        console.log('2. upload task');

                        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                        statusBar.set(progress);
                        console.log('Upload is ' + progress + '% done');
                        switch (snapshot.state) {
                          case firebase.storage.TaskState.PAUSED: // or 'paused'
                            console.log('Upload is paused');
                            break;
                          case firebase.storage.TaskState.RUNNING: // or 'running'
                            console.log('Upload is running');
                            break;
                        }

                    }, function(error) {
                          // Handle unsuccessful uploads
                          console.log('upload was unsuccessful');
                    }, function() {
                          // Handle successful uploads on complete
                          // For instance, get the download URL: https://firebasestorage.googleapis.com/...
                          console.log('3. upload success.');

                          // TODO: IMPORTANT Check that BOTH the database reference AND the storage have completed - only create db ref after storage
                          databaseRef.push().set({ aid: file.name }).then(function() {
                              console.log('4. database ref pushed');
                              var downloadURL = uploadTask.snapshot.downloadURL;
                              console.log('5. reloading page');
                              location.reload(true); // when `true` is set it will reload from the server rather than locally from cache
                          });
                    });

                    // can we get here without having updated the database etc?
                    // TODO: check this - may need some flags


                    // console.log('2. references created');
                    // // TODO: IMPORTANT Check that BOTH the database reference AND the storage have completed - only create db ref after storage
                    // databaseRef.push().set({
                    //   aid: file.name
                    // }).then(function() {
                    //   console.log('3. database ref pushed');
                    //   var uploadTask = storageRef.put(file);
                    //   console.log('4. upload task');
                    //   uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function(snapshot) {
                    //
                    //     var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    //     console.log('Upload is ' + progress + '% done');
                    //     switch (snapshot.state) {
                    //       case firebase.storage.TaskState.PAUSED: // or 'paused'
                    //         console.log('Upload is paused');
                    //         break;
                    //       case firebase.storage.TaskState.RUNNING: // or 'running'
                    //         console.log('Upload is running');
                    //         break;
                    //     }
                    //   }, function(error) {
                    //     // Handle unsuccessful uploads
                    //     console.log('upload was unsuccessful');
                    //   }, function() {
                    //     // Handle successful uploads on complete
                    //     // For instance, get the download URL: https://firebasestorage.googleapis.com/...
                    //     console.log('upload success.');
                    //     var downloadURL = uploadTask.snapshot.downloadURL;
                    //     console.log('5. reloading page');
                    //     location.reload(true); // when `true` is set it will reload from the server
                    //   });
                    // });
                  } // end if
                });
              </script>
          </label>
        </li>
      </ul>
    </div>

    <div class="wrapper">
        {{#each scenes}}
            <div class="grid-item">
                <img src="https://www.atlasreality.xyz/bolt.svg" alt={{this.aid}} height="48" width="48">
                <p class="sceneTitle">{{this.aid}}</p>
            </div>
        {{/each}}

        <div class="grid-item">
          <div class="ldBar" id="progressBar"
                  data-value="0" data-type="fill"
                  data-img="boltFill.svg"
                  data-fill-background="#FFFFFF"
                  data-img-size="48,48">
          </div>
        </div>
    </div>

  </body>
</html>
